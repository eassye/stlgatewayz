@{
    ViewBag.Title = "Admin Page";
}

@model GatewayZ.Models.AdminPageModel
@using GatewayZ.GatewayZDAO;


<div id="background">
    <img src="~/Images/aboutpagebg.jpg" alt="bgimage" />
</div>

<div class="Admininterface">
    <div class="container">
        <ul class="nav nav-tabs">
            <li class="active"><a data-toggle="tab" href="#home">Edit Home</a></li>
            <li><a data-toggle="tab" href="#users">Edit Users</a></li>
            <li><a data-toggle="tab" href="#events">Edit Events</a></li>
            <li><a data-toggle="tab" href="#editClub">Edit Club</a></li>

            @*Adding a club will be added within a future phase*@
            @*<li><a data-toggle="tab" href="#addClub">Add Club</a></li>*@
        </ul>

        <div class="tab-content" style="position:absolute">
            <div id="home" class="tab-pane fade active in">
                <h3>Home</h3>
                <form id="form1" enctype="multipart/form-data" method="post" action="Upload.aspx">
                    <div class="row">
                        <label for="fileToUpload">Select a File to Upload</label><br>
                        <input type="file" name="fileToUpload" id="fileToUpload" onchange="fileSelected();">
                    </div>
                    <div id="fileName"></div>
                    <div id="fileSize"></div>
                    <div id="fileType"></div>
                    <div class="row">
                        <input type="button" onclick="uploadFile()" value="Upload">
                    </div>
                    <div id="progressNumber"></div>
                </form>
            </div>

            <div id="users" class="tab-pane fade">
                <h3>Users</h3>
                @Html.ValidationSummary()
                <form class="form-horizontal" role="form" method="post">
                    <div class="form-group">
                        @{
                            var list = new UserDAO();

                            var _users = list.RegisteredUserList();

                            List<SelectListItem> UserList = new List<SelectListItem>();
                            @foreach (var user in _users)
                            {
                                UserList.Add(new SelectListItem
                                {
                                    Text = user,
                                    Value = user
                                });
                            }
                        }

                        @Html.LabelFor(model => model.User.displayName, new { @class = "control-label col-xs-2" })
                        <div class="col-xs-10">
                            @Html.DropDownListFor(model => model.User.displayName, UserList, "-- Select a User to Edit --")
                        </div>
                    </div>

                    @{
                        var clubList = new ClubDAO();

                        var _clubs = clubList.ListOfClubs();

                        List<SelectListItem> ClubList = new List<SelectListItem>();
                        @foreach (var club in _clubs)
                        {
                            ClubList.Add(new SelectListItem
                            {
                                Text = club,
                                Value = club
                            });
                        }
                    }

                    @Html.LabelFor(model => model.User.club, new { @class = "control-label col-xs-2" })
                    <div class="col-xs-10">
                        @Html.DropDownListFor(model => model.User.club, ClubList, "-- Select a Club --")
                    </div>

                    @{
                        List<SelectListItem> isMemberList = new List<SelectListItem>();

                        isMemberList.Add(new SelectListItem
                        {
                            Text = "Yes",
                            Value = bool.TrueString
                        });

                        isMemberList.Add(new SelectListItem
                        {
                            Text = "No",
                            Value = bool.FalseString
                        });
                    }

                    @Html.LabelFor(model => model.User.isMember, new { @class = "control-label col-xs-2" })
                    <div class="col-xs-10">
                        @Html.DropDownListFor(model => model.User.isMember, isMemberList, "-- Select Yes or No --")
                    </div>
            

            <div class="col-sm-offset-2 col-sm-10">
                <input type="submit" value="Submit" class="btn btn-default" />
            </div>
            </form>

        </div>





            <div id="events" class="tab-pane fade">
                <h3>Events</h3>
                <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam.</p>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    function fileSelected() {
        var file = document.getElementById('fileToUpload').files[0];
        if (file) {
            var fileSize = 0;
            if (file.size > 1024 * 1024)
                fileSize = (Math.round(file.size * 100 / (1024 * 1024)) / 100).toString() + 'MB';
            else
                fileSize = (Math.round(file.size * 100 / 1024) / 100).toString() + 'KB';

            document.getElementById('fileName').innerHTML = 'Name: ' + file.name;
            document.getElementById('fileSize').innerHTML = 'Size: ' + fileSize;
            document.getElementById('fileType').innerHTML = 'Type: ' + file.type;
        }
    }

    function uploadFile() {
        var fd = new FormData();
        fd.append("fileToUpload", document.getElementById('fileToUpload').files[0]);
        var xhr = new XMLHttpRequest();
        xhr.upload.addEventListener("progress", uploadProgress, false);
        xhr.addEventListener("load", uploadComplete, false);
        xhr.addEventListener("error", uploadFailed, false);
        xhr.addEventListener("abort", uploadCanceled, false);
        xhr.open("POST", "UploadMinimal.aspx");
        xhr.send(fd);
    }

    function uploadProgress(evt) {
        if (evt.lengthComputable) {
            var percentComplete = Math.round(evt.loaded * 100 / evt.total);
            document.getElementById('progressNumber').innerHTML = percentComplete.toString() + '%';
        }
        else {
            document.getElementById('progressNumber').innerHTML = 'unable to compute';
        }
    }

    function uploadComplete(evt) {
        /* This event is raised when the server send back a response */
        alert(evt.target.responseText);
    }

    function uploadFailed(evt) {
        alert("There was an error attempting to upload the file.");
    }

    function uploadCanceled(evt) {
        alert("The upload has been canceled by the user or the browser dropped the connection.");
    }
</script>